import numpy as np
from torch.utils.data import Dataset, DataLoader
import torch.nn as nn
import torch
from torch.nn import functional as F
from tqdm import tqdm
import matplotlib.pyplot as plt
from nn_Classes import *
from metric import *
import os

def data_pre():
    #Data prepare
    print("\n Data prepare")
    pim=os.listdir("../PanelImages/")
    pvpl=[]
    enF=[]
    for name in pim:
        str=name.replace('.jpg','').split('_')
        s=[float(str[4]),float(str[6]),float(str[8]),float(str[-1]),float(str[-3])]
        pvpl.append(s[-1])
        enF.append(s[:4])
    print("\tfinished")
    return np.array(pim),np.array(pvpl),np.array(enF)

def data_load(imgdir,pvpl,Env):
    #load data
    print("\n load data")
    index=np.array(list(range(45754)))
    np.random.shuffle(index)
    indr=np.append(index[:20187],index[26916:33645])
    #indr=index[6729:33645]
    indt=index[20187:26916]
    indd=index[36645:]

    #indr=index[:64]
    #indd=index[64:128]
    #indt=index[64:128]

    train=SolarSet(imgdir[indr],pvpl[indr],Env[indr])
    test=SolarSet(imgdir[indt],pvpl[indt],Env[indt])
    dev=SolarSet(imgdir[indd],pvpl[indd],Env[indd])

    train_loader=DataLoader(train, 64,shuffle=True,num_workers=5)
    test_loader=DataLoader(test, 64,shuffle=True,num_workers=5)
    dev_loader=DataLoader(dev, 64,shuffle=True,num_workers=5)
    print("\nfinished")
    return train_loader,test_loader,dev_loader

def train_impactnet(train,test,dev):
    #train impactnet
    print("\n train impactnet")
    epochs=90
    lr=0.00001
    test_cfloss=[]
    test_qrloss=[]
    net=ImpactNet()
    net.cuda()
    criteria=nn.CrossEntropyLoss()
    for ii in tqdm(range(epochs)):
      if ii%30==0:
        sgd=torch.optim.SGD(net.parameters(),lr)
        lr=lr*0.1
      for j,data in enumerate(train):
        i,p,f=data['image'].float().cuda(),data['pvpl'].float().cuda(),data['env'].float().cuda()
        p=(p*100//12.5).long().cuda()
        sgd.zero_grad()
        out=net(i,f)
        loss=criteria(out,p)
        loss.backward()
        sgd.step()
      with torch.no_grad():
        test_cfloss.append(float(class_error(net,test)))
        test_qrloss.append(float(qr_loss(net,test)))
    print("\nfinished")
    return test_cfloss,test_qrloss

def train_SolarQRNN(train,test,dev):
    #train SolarQRNN
    print("\n train SolarQRNN")
    epochs=90
    lr=0.001
     
    train_loss=[]
    dev_loss=[]
    test_loss=[]

    Nnet=SolarQRNN()
    Nnet.cuda()
    for ii in tqdm(range(epochs)):
      if ii%30==0:
        sgd=torch.optim.SGD(Nnet.parameters(),lr)
        lr=lr*0.1
      Nnet.train()
      for j,data in (enumerate(train)):
        i,p,f=data['image'].float().cuda(),data['pvpl'].float().cuda(),data['env'].float().cuda()
        p=p.view(-1,1)
        pnew=torch.ones((p.shape[0],99),dtype=float).cuda()
        p=p*pnew*100
        sgd.zero_grad()
        out=Nnet(i,f)
        loss=pin_ball_loss(p,out)
        loss.backward()
        sgd.step()
      Nnet.eval()
      with torch.no_grad():
        a=compute_test_loss(Nnet,test)
       # b=compute_test_loss(Nnet,dev)
        #train_loss.append(float(loss))
        test_loss.append(float(a))
       # dev_loss.append(float(b))
        
    #torch.save(Nnet.state_dict(), "SolarQRNN.pth")
    print("\nfinished")
    return train_loss,test_loss,dev_loss

def predict_SolarQRNN(test):
    print("\nPredict")
    net=SolarQRNN()
    net.cuda()
    net.load_state_dict(torch.load("SolarQRNN.pth"))
    with torch.no_grad():
        for j,data in (enumerate(test)):
            i,p,f=data['image'].float().cuda(),data['pvpl'].float().cuda(),data['env'].float().cuda()
            p=p.view(-1,1)
            pnew=torch.ones((p.shape[0],99),dtype=float).cuda()
            p=p*pnew*100
            out=net(i,f)
            print(out[10],p[10])
            os.system("Pause")
    print("\tfinished")
    
def plot_result():
    plt.rc('font',family='Times New Roman')
    x=list(range(1,91))
    y1=[0.5957167285174142, 0.6622927865303313, 0.6274231738962697, 0.6945274130406312, 0.559179984120205, 0.5597571944646795, 0.4946772864086471, 0.46236906408939001, 0.462530049823858215, 0.44909784360533075, 0.455809004685382, 0.44587675420808481, 0.36237395472385944, 0.35544722530408463, 0.34556374211823063, 0.26231771854197455, 0.24883924756139316, 0.25544648834077081, 0.245244946353404335, 0.25898452576864489, 0.2358831685617740746, 0.234873357246982724, 0.214862708401744929, 0.205898133969333993, 0.194914739625294003, 0.194186712832042283, 0.185560576888665978, 0.185227239927339814, 0.184873599875596294, 0.175518699137947672, 0.173864019871809013, 0.1694919604833329459, 0.1638640337656750743, 0.1632240361295996054, 0.164894084697376958, 0.1584873273289008202, 0.15639158973703935845, 0.145206274949987472, 0.143874196172160943, 0.144238245066482408, 0.1384228080062632688, 0.135237893855048502, 0.128535063612665054, 0.1248631033243500665, 0.113889548982281497, 0.108794730585841497, 0.1044561244361768252, 0.10484725642630172, 0.095248541591597486, 0.096179661810574938, 0.094853106179705843, 0.0895201226876794472, 0.084545478783751842, 0.083874924090525928, 0.0783870041112905733, 0.074508976687681139, 0.073499643182342733, 0.0694556125051473999, 0.063557050278623257, 0.055407608263616775, 0.054524501067436496, 0.052566856566825837, 0.0504233368538650954, 0.04888231077300645, 0.048786327232515055, 0.04529780275784006, 0.04540031661566232, 0.048841673239716586, 0.04874163745070063, 0.04873353396719362, 0.042125429399166294, 0.04899530394476735, 0.038691480945623525, 0.04894329764857967, 0.04873606205054312, 0.04197107896137951, 0.035466364919700915, 0.05201310695186237, 0.052221218638677045, 0.04868470399880748, 0.04873189687072608, 0.04878387477138913, 0.04222715666631802, 0.038698009480089782, 0.04228411688244531, 0.05533989705165809, 0.04540353241705434, 0.03890122024157134, 0.03526310397533651, 0.058717865724088785]
    y2=[0.9316449574766496, 0.8086805369362316, 0.8250329591607361, 0.710167091072364836, 0.5875432688869092, 0.48169461201618827, 0.47136817863109268, 0.471526963076674254, 0.3807141456575148, 0.3495901733584609, 0.35925591117105136, 0.2805196495983544, 0.26938984977602496, 0.260062117089357174, 0.17004258314423217, 0.210231580541062093, 0.19165952462120583, 0.17970820978327003, 0.15924299933994176, 0.18005364679561212, 0.110247939142064942, 0.08020223856051913, 0.0875136031312037, 0.082779909572303205, 0.086906228099706486, 0.08070638377542409, 0.0874408285593859, 0.087150600770355668, 0.087986955272049566, 0.08005344554552266, 0.0700958719258342, 0.074905759073362307, 0.076938977161726046, 0.076970674273622883, 0.076987572261619688, 0.07697248159887344, 0.074956929794629411, 0.075793512160034343, 0.0769231102659132356, 0.07004518222658472, 0.0706872910386447, 0.069198445357883491, 0.068003313193611493, 0.0669566186400674985, 0.065872861375436936, 0.0659068856856878136, 0.06906983652168157, 0.064907806438783362, 0.0658718214708958615, 0.05775594021201305, 0.058900111407494266, 0.05840347474167891, 0.07954182085332958, 0.06873990859813461, 0.05923528012961934, 0.05823213828260168, 0.08019707971683296, 0.0905152333879893, 0.07036207334294806, 0.09019542400078762, 0.047780826217458825, 0.05923535507488319, 0.050017833472908388, 0.07953654213996717, 0.05908152756897529, 0.06888293971292353, 0.04841241180882516, 0.038089097797884613, 0.06989379517556748, 0.08052712635058596, 0.04876808909269686, 0.04871773865750824, 0.03986403403903454, 0.03954953883315042, 0.04085721233493359, 0.03936780222597629, 0.04019857734123665, 0.04003978778951442, 0.03988682822015216, 0.038020435410850268, 0.037021128983613062, 0.035939134431384753, 0.037986159233459415, 0.038986022028329434, 0.035906637589779504, 0.036952572084512489, 0.037987190506122127, 0.03728796954100782, 0.03693900102758299, 0.038036050137836818]
    y3=[0.8236238781621734, 0.921842716404102, 0.8235207130912142, 0.9281121758481694, 0.8202973640699388, 0.7120183790857619, 0.6908585638172112, 0.67121735013016876, 0.57137085957101684, 0.4818402010368749, 0.4805477205869724, 0.48019727833051037, 0.4384421803553951, 0.38037121710353264, 0.3818373639385958, 0.349748478651581015, 0.35956280699982347, 0.27102505016553219, 0.27086154968369685, 0.26988128188010563, 0.25925035364543377, 0.1803607831968156, 0.14874542185256137, 0.15808874905800341, 0.15940933873586401, 0.15957044371710816, 0.18003329370686965, 0.16971469565426632, 0.18019188398157942, 0.116904932348684413, 0.0996005163625316636, 0.094793669793796727, 0.097920897647414629, 0.09685684102513053, 0.0948271784130612585, 0.09587412875708844, 0.085808886715089972, 0.083762597853371789, 0.084923165135164355, 0.0758731127818901704, 0.07909993893477401, 0.074825382341734396, 0.066888814108208191, 0.066905988186520849, 0.065922519910105471, 0.058069858466167546, 0.055907153165601116, 0.058018647885388279, 0.055989253175930596, 0.05006320734143359, 0.048248823240463765, 0.05857474372257199, 0.057938083714824922, 0.06938197370410719, 0.06921571038680396, 0.068883258402605676, 0.05873872712498209, 0.050132746290270146, 0.057952914524024048, 0.059552204379322415, 0.054824371060152498, 0.054940559190004665, 0.054925460165717325, 0.05940154141803874, 0.050066232820407878, 0.05874884299729374, 0.056956111369987492, 0.05687269936316708, 0.058019443804145378, 0.0537761567835341535, 0.059084040493000703, 0.05776404447919109, 0.058036098494371643, 0.05805246839708432, 0.056922058949206174, 0.04858147341868988, 0.0569540877592385985, 0.053825824261221436, 0.05893559918143532, 0.056888570073231183, 0.05955244926640762, 0.0527141158418602963, 0.05898553782248783, 0.05905865661912944, 0.05805169279387031, 0.056005407412133654, 0.054841273098694112, 0.05872316990133714, 0.057905034693583522, 0.05697225773191522]
    y4=[0.910382353945998414, 0.933384407388305, 0.820350184128368, 0.79332852040611073, 0.79185926145042756, 0.710299433754723154, 0.69251171927814604, 0.69267562514979587, 0.66989948260067934, 0.592330184338852, 0.56023857564719538, 0.57121227241093598, 0.57021941273625143, 0.49136015244424704, 0.46072213105703387, 0.47071315789106084, 0.48004612996841272, 0.43943332310602994, 0.37071807548735185, 0.3707004853231939, 0.37038799573927795, 0.338757310908570826, 0.280371222658586, 0.28037606224637528, 0.25973178674420175, 0.18969667491216115, 0.1711939954589184, 0.170383033098705226, 0.1903672065576781, 0.1790505137060989, 0.16956358792313187, 0.15808619311491982, 0.15989808872992566, 0.1798745086255385, 0.18053244392931027, 0.17101473418728057, 0.18037589616007038, 0.16938237104980825, 0.136987884274280874, 0.116955363318748806, 0.097987706959789391, 0.096938453161080579, 0.090199331364693632, 0.086955347326181341, 0.087020113524776624, 0.088052964288360321, 0.079034137905998704, 0.075922223896800571, 0.067939099178679559, 0.06022570116508645, 0.068002269922834131, 0.068116954820013771, 0.066972765564319173, 0.0658736211093312245, 0.0679874632919627, 0.06808546950701977, 0.05874932539327445, 0.05985630851299132, 0.057004242753347099, 0.05761062184388032, 0.05888723646868846, 0.0571209146554299515, 0.05957291978527826, 0.059572962281442075, 0.059396254425059395, 0.059736706341891235, 0.058002813112530338, 0.05857758526223157, 0.05759743500731466, 0.059227397782872365, 0.05700423899674026, 0.057019309540398584, 0.056954043583899303, 0.058002033942050728, 0.059052551120757379, 0.057987478785694248, 0.056955655467085944, 0.059071372307663165, 0.056938948670540355, 0.0593759826156612, 0.057953430154680372, 0.057003690937796072, 0.057050574921768616, 0.05908456849437396, 0.0560041121777345795, 0.056955615170302236, 0.059132912181008623, 0.0582606004990083, 0.0069556310358240975, 0.058069090909915031]
    y5=[0.9038132641506768, 0.9217939405838507, 0.7171126272672292, 0.7154216106199879, 0.710200111610079722, 0.65074418179887248, 0.67021149478612386, 0.68168669099962118, 0.6712018303720945, 0.64990734250503053, 0.58169176922571145, 0.5705442200353032, 0.58103883844473659, 0.559892813706127705, 0.53908720196161709, 0.54973568298136587, 0.49165408643929934, 0.4371217057544978, 0.360238416861213215, 0.39003443831629777, 0.36987344397220405, 0.38052956422960259, 0.38085993269696992, 0.379874465408638, 0.28003085395506147, 0.258743684145351775, 0.28068851001685608, 0.1806908266668264, 0.18018907925551048, 0.17921193108997323, 0.1905127549088313, 0.1800228191678409, 0.169384571577773375, 0.16988368044574415, 0.14940575060746066, 0.17018825517217395, 0.16922058747051676, 0.137948266517037325, 0.17019857348437151, 0.15939634008930955, 0.14826438477198735, 0.13805169697887349, 0.12687321930970299, 0.124890636494709709, 0.117984643938377459, 0.117920173894518587, 0.107133474368082266, 0.0972907081515821, 0.0971957652694158, 0.0948758176784730834, 0.0922838549105784, 0.08952261244203433, 0.06039188009728306, 0.07936268084734422, 0.05891014736553643, 0.06856584867506732, 0.0685680491526836, 0.0679872271206187, 0.057004990247954798, 0.059068165919100651, 0.056906248097759411, 0.05905229083664387, 0.05922732028980989, 0.05913442322539024, 0.057003698941851593, 0.05938342134483881, 0.058970391237262806, 0.054776027512020118, 0.05907929393755271, 0.054875309850771966, 0.0538094173583247564, 0.058020739426092417, 0.058004345276728381, 0.057984631945479315, 0.056022309890799417, 0.056986076451124231, 0.005808420962782531, 0.053876459091173679, 0.054874277819559429, 0.05903566888519426, 0.054940031502139915, 0.054776771380149484, 0.058036342158215708, 0.058002537576638508, 0.054842016852388943, 0.059116536827944222, 0.056953340005841556, 0.059034901153327937, 0.056924897720902731, 0.058070382537071973]
    y=np.array([y1,y2,y3,y4,y5])
    y=np.mean(y,axis=0)

    fig, ax = plt.subplots()
    plt.xlabel("Training Time")
    plt.ylabel("Classification error %")
    plt.title("Classification Performance of ImpactNet")
    ax.plot(x, y1, '*r--', label='CV1',markersize=4)
    ax.plot(x, y2, 'ob--', label='CV2',markersize=4)
    ax.plot(x, y3, '^g--', label='CV3',markersize=4)
    ax.plot(x, y4, '+c--', label='CV4',markersize=4)
    ax.plot(x, y5, 'sy--', label='CV5',markersize=4) 
    ax.plot(x, y, 'xk-', label='Mean',markersize=4)
    legend = ax.legend( )
    plt.savefig('solarqrnn.svg',dpi=600,format='svg')
    plt.show()
    

if __name__ == '__main__':
    #print("CUDA Version:", torch.__version__)
    #imgdir,pvpl,Env=data_pre()
    #train,test,dev=data_load(imgdir,pvpl,Env)

    #trainl,testl,devl=train_SolarQRNN(train,test,dev)
    #print(testl)

    #tc,tq=train_impactnet(train,test,dev)
    #print(tc,'\n',tq)

    #predict_SolarQRNN(test)
    plot_result()

    
